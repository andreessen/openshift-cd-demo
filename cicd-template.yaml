apiVersion: v1
kind: Template
labels:
  template: cicd
  group: cicd
metadata:
  annotations:
    iconClass: icon-jenkins
    tags: instant-app,jenkins,gogs,nexus,cicd
  name: cicd
message: "Use the following credentials for login:\nJenkins: use your OpenShift credentials\nNexus: admin/admin123\nSonarQube: admin/admin\nGogs Git Server: gogs/gogs"
parameters:
- displayName: DEV project name
  value: dev
  name: DEV_PROJECT
  required: true
- displayName: STAGE project name
  value: stage
  name: STAGE_PROJECT
  required: true
- displayName: Deploy Eclipse Che
  description: Deploy Eclipse Che in order to use as an online IDE for changing code in this demo
  value: "false"
  name: WITH_CHE
  required: true
- displayName: Ephemeral
  description: Use no persistent storage for Gogs and Nexus
  value: "true"
  name: EPHEMERAL
  required: true
- description: Webhook secret
  from: '[a-zA-Z0-9]{8}'
  generate: expression
  name: WEBHOOK_SECRET
  required: true
objects:
- apiVersion: v1
  groupNames: null
  kind: RoleBinding
  metadata:
    name: default_admin
  roleRef:
    name: admin
  subjects:
  - kind: ServiceAccount
    name: default
# Pipeline
- apiVersion: v1
  kind: BuildConfig
  metadata:
    annotations:
      pipeline.alpha.openshift.io/uses: '[{"name": "jenkins", "namespace": "", "kind": "DeploymentConfig"}]'
    labels:
      app: cicd-pipeline
      name: cicd-pipeline
    name: tasks-pipeline
  spec:
    triggers:
      - type: GitHub
        github:
          secret: ${WEBHOOK_SECRET}
      - type: Generic
        generic:
          secret: ${WEBHOOK_SECRET}
    runPolicy: Serial
    source:
      type: None
    strategy:
      jenkinsPipelineStrategy:
        env:
        - name: DEV_PROJECT
          value: ${DEV_PROJECT}
        - name: STAGE_PROJECT
          value: ${STAGE_PROJECT}
        jenkinsfile: |-
          def version, mvnCmd = "mvn -s configuration/cicd-settings-nexus3.xml"

          pipeline {
            agent {
              label 'maven'
            }
            stages {
                
              stage("Initialize") {
                  steps {
                      sh "oc whoami"
                      script {
                        try {
                          sh "oc new-project ${env.DEV_PROJECT} --display-name='Tasks - ${env.DEV_PROJECT}'"
                          
                          sh "oc policy add-role-to-user edit system:serviceaccount:cicd:jenkins -n ${env.DEV_PROJECT}"
                          
                          sh "oc create quota -n ${env.DEV_PROJECT} compute --scopes=NotTerminating --hard=cpu=2,memory=2G"
                          sh "oc create quota -n ${env.DEV_PROJECT} logical --hard=pods=5,services=2,secrets=20,persistentvolumeclaims=2"
                          sh "oc project ${env.DEV_PROJECT}"
                          sh "oc adm policy add-role-to-user admin gpn"
                        } catch(Exception e) {
                          println("Dev project already exists")
                        }

                      }
                      
                      script {
                        try {
                          sh "oc new-project ${env.STAGE_PROJECT} --display-name='Tasks - ${env.STAGE_PROJECT}'"
                          sh "oc policy add-role-to-user edit system:serviceaccount:cicd:jenkins -n ${env.STAGE_PROJECT}"
                      
                          sh "oc create quota -n ${env.STAGE_PROJECT} compute --scopes=NotTerminating --hard=cpu=1,memory=2G"
                          sh "oc create quota -n ${env.STAGE_PROJECT} logical --hard=pods=5,services=2,secrets=20,persistentvolumeclaims=2"
                          sh "oc project ${env.STAGE_PROJECT}"
                          sh "oc adm policy add-role-to-user admin gpn"
                        } catch(Exception e) {
                          println("Stage project already exists")
                        }
                      }
                      script {
                        try {
                          sh "oc new-project ${env.STAGE_PROJECT}-ab --display-name='Tasks - ${env.STAGE_PROJECT}-ab'"
                          sh "oc policy add-role-to-user edit system:serviceaccount:cicd:jenkins -n ${env.STAGE_PROJECT}-ab"
                      
                          sh "oc create quota -n ${env.STAGE_PROJECT}-ab compute --scopes=NotTerminating --hard=cpu=2,memory=3G"
                          sh "oc create quota -n ${env.STAGE_PROJECT}-ab logical --hard=pods=10,services=4,secrets=30,persistentvolumeclaims=2"
                          sh "oc project ${env.STAGE_PROJECT}-ab"
                          sh "oc adm policy add-role-to-user admin gpn"
                        } catch(Exception e) {
                          println("Stage-ab project already exists")
                        }
                      }
                  }
                }
                
              stage('Build App') {
                steps {
                  git branch: 'eap-7', url: 'http://gogs:3000/gogs/openshift-tasks.git'
                  script {
                      def pom = readMavenPom file: 'pom.xml'
                      version = pom.version
                  }
                  sh "${mvnCmd} install -DskipTests=true"
                }
              }
              stage('Test') {
                steps {
                  sh "${mvnCmd} test"
                  step([$class: 'JUnitResultArchiver', testResults: '**/target/surefire-reports/TEST-*.xml'])
                }
              }
              stage('Code Analysis') {
                steps {

                      withSonarQubeEnv('Sonar') {
                          sh "${mvnCmd} sonar:sonar -Dsonar.host.url=http://sonarqube:9000 -DskipTests=true"
                      }    
                    
                  
                }
              }
              stage("Quality Gate") {
                  steps {
                      timeout(time: 1, unit: 'HOURS') { // Just in case something goes wrong, pipeline will be killed after a timeout
                      script {
                          withSonarQubeEnv('Sonar') {
                              sleep 20
                              println("QG: start")
                              //def qg = waitForQualityGate() // Reuse taskId previously collected by withSonarQubeEnv
                              //println("QG: ${qg.status}")
                              //if (qg.status != 'OK') {
                                //error "Pipeline aborted due to quality gate failure: ${qg.status}"
                              //}
                          }    
                          
                      }
                    }
                  }
              }
              stage('Archive App') {
                steps {
                  sh "${mvnCmd} deploy -DskipTests=true -P nexus3"
                }
              }
              stage('Create Image Builder') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        return !openshift.selector("bc", "tasks").exists();
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.newBuild("--name=tasks", "--image-stream=wildfly:latest", "--binary=true")
                      }
                    }
                  }
                }
              }

              stage('Build Image') {
                steps {
                  sh "rm -rf oc-build && mkdir -p oc-build/deployments"
                  sh "cp target/openshift-tasks.war oc-build/deployments/ROOT.war"
                  
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                          try {
                              openshift.patch('bc/tasks', "'{\"spec\":{\"resources\":{\"limits\":{\"cpu\" : \"100m\", \"memory\" : \"256Mi\"}}}}'")
                          } catch(Exception e) {
                              println("Dev project bc already patched")
                          }
                          openshift.selector("bc", "tasks").startBuild("--from-dir=oc-build", "--wait=true")
                      }
                    }
                  }
                }
              }

              stage('Create DEV') {
                when {
                  expression {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        return !openshift.selector('dc', 'tasks').exists()
                      }
                    }
                  }
                }
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        def app = openshift.newApp("tasks:latest")
                        app.narrow("svc").expose();

                        openshift.set("probe dc/tasks --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=80 --failure-threshold=20 --period-seconds=10 --timeout-seconds=5")
                        openshift.set("probe dc/tasks --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 --timeout-seconds=5")
                        openshift.set("resources dc/tasks --requests=cpu=500m,memory=600Mi --limits=cpu=900m,memory=900Mi -n ${env.DEV_PROJECT}")
                        echo "Using project: ${openshift.project()}"
                        def dc = openshift.selector("dc", "tasks")
                        while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                            sleep 10
                        }
                        openshift.set("triggers", "dc/tasks", "--manual")
                        openshift.set("env", "dc/tasks", "MYVAR=foo")
                        sleep 45
                        sh "oc autoscale dc/tasks --min 1 --max 2 --cpu-percent=30 -n ${env.DEV_PROJECT}"
                      }
                    }
                  }
                }
              }

              stage('Deploy DEV') {
                steps {
                  script {
                    openshift.withCluster() {
                      openshift.withProject(env.DEV_PROJECT) {
                        openshift.selector("dc", "tasks").rollout().latest();
                        def dc = openshift.selector("dc", "tasks");
                        def dcObj = dc.object();
                        def podSelector = openshift.selector('pod', [deployment: "tasks-${dcObj.status.latestVersion}"])
                        podSelector.untilEach {
                            echo "pod: ${it.name()}"
                            return it.object().status.containerStatuses[0].ready
                        }
                        sleep 45
                      }
                    }
                  }
                }
              }
              
              
              stage('Run integration tests') {
                  steps {
                      script {
                          openshift.withCluster() {
                              openshift.withProject(env.DEV_PROJECT) {
                                  echo "Now using project: ${openshift.project()}"
                                  sh "oc get route tasks -o=go-template='{{ .spec.host }}' -n ${env.DEV_PROJECT} > devHost"
                                  println("Here we run integration tests")
                                  def devHost = readFile('devHost').trim()
                                  println("dev host = ${devHost}")
                                  sh "curl -X GET http://${devHost}/ws/demo/load/120"
                                  sleep 30
                                  //count pods
                                  def dc = openshift.selector("dc", "tasks")
                                  def count = 1
                                  while (count < 40) {
                                      if (count > 30) {
                                          error "Pipeline aborted due to Integration tests fail"
                                      }
                                      if (dc.object().spec.replicas < 2) {
                                          echo "Sleep....."
                                          sleep 10
                                          count++;
                                      } else {
                                          break;
                                      }
                                  }
                                  def dcObj = dc.object();
                                  echo "dcObj: ${dcObj}"
                                  def podSelector = openshift.selector('pod', [deployment: "tasks-${dcObj.status.latestVersion}"])
                                  echo "After podSelector: ${podSelector}"

                                  count = 1
                                  while (count < 40) {
                                      if (count > 30) {
                                          error "Pipeline aborted due to Integration tests fail"
                                      }
                                      sh "oc get dc tasks '-o=go-template={{ .status.readyReplicas }}' -n ${env.DEV_PROJECT} > devReplicas"
                                      def devReplicas = readFile('devReplicas').trim()
                                      println("devReplicas  = ${devReplicas}")
                                      if (devReplicas != "2") {
                                          echo "Sleep....."
                                          sleep 10
                                          count++;
                                      } else {
                                          break;
                                      }
                                  }
                                  
                                  println("Integration tests completed succesfully")
                              }
                          }
                      }
                  }
              }
              stage('Promote to STAGE?') {
                steps {
                  timeout(time:15, unit:'MINUTES') {
                      input message: "Promote to STAGE?", ok: "Promote"
                  }

                  
                }
              }
              stage('Deploy STAGE') {
                steps {
                  script {
                    newState = "blue"
                    currentState = "green"
                    
                    
                    openshift.withCluster() {
                      openshift.withProject(env.STAGE_PROJECT) {
                          if (!openshift.selector('dc', 'tasks-green').exists()) {
                              println("Begin")
                              openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.STAGE_PROJECT}/tasks-green:${version}")
                              openshift.newApp("--name=tasks-green --image-stream=${env.STAGE_PROJECT}/tasks-green:${version}").narrow("svc").expose()
                              openshift.set("probe dc/tasks-green --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=90 --failure-threshold=20 --period-seconds=20 --timeout-seconds=5")
                              openshift.set("probe dc/tasks-green --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 --timeout-seconds=5")
                              openshift.set("resources dc/tasks-green --requests=cpu=330m,memory=600Mi --limits=cpu=330m,memory=600Mi -n ${env.STAGE_PROJECT}")
                          } else {
                              
                              if (!openshift.selector('dc', 'tasks-blue').exists()) {
                                  println("New Blue")
                                  openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.STAGE_PROJECT}/tasks-blue:${version}")
                                  openshift.newApp("--name=tasks-blue --image-stream=${env.STAGE_PROJECT}/tasks-blue:${version}")
                                  openshift.set("probe dc/tasks-blue --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=90 --failure-threshold=20 --period-seconds=20 --timeout-seconds=5")
                                  openshift.set("probe dc/tasks-blue --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 --timeout-seconds=5")
                                  openshift.set("resources dc/tasks-blue --requests=cpu=330m,memory=600Mi --limits=cpu=330m,memory=600Mi -n ${env.STAGE_PROJECT}")
                                  println("6")
                                  def dc = openshift.selector("dc", "tasks-blue")
                                  while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                                      sleep 10
                                  }
                                  def route = openshift.selector('route', 'tasks-green').object()
                                  openshift.patch('route/tasks-green', "'{\"spec\":{\"to\":{\"name\":\"tasks-blue\"}}}'")
                                  println("7")
                              } else {
                                  println("Both")
                                  
                                  def newState = 'green'
                                  def currentState = 'blue'
                                  
                                  sh "oc get route tasks-green -n ${env.STAGE_PROJECT} -o jsonpath='{ .spec.to.name }' --loglevel=4 > current_route"
                                  current_route = readFile('current_route').trim()
                                  println("Current active route: " + current_route)
                                    
                                  sh "oc get dc ${current_route} -n ${env.STAGE_PROJECT} -o jsonpath='{ .spec.triggers[1].imageChangeParams.from.name }' --loglevel=4 > current_version"
                                  current_version = readFile('current_version').trim()
                                  println("Current active version: " + current_version)
                                  if (current_route == "tasks-blue") {
                                      newState = "green"
                                      currentState = "blue"
                                  }
                                  if (current_route == "tasks-green") {
                                      newState = "blue"
                                      currentState = "green"
                                  }
                                  println("New state: " + newState)
                                  println("Current state: " + currentState)
                                  println("4")
                                  if (newState == 'green') {
                                      println("4-1")
                                      openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.STAGE_PROJECT}/tasks-green:${version}")
                                      openshift.selector('dc', 'tasks-green').delete()
                                      openshift.selector('svc', 'tasks-green').delete()
                                      println("4-1-1")
                                      openshift.newApp("--name=tasks-green --image-stream=${env.STAGE_PROJECT}/tasks-green:${version}")
                                      openshift.set("probe dc/tasks-green --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=90 --failure-threshold=20 --period-seconds=20 --timeout-seconds=5")
                                      openshift.set("probe dc/tasks-green --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 --timeout-seconds=5")
                                      openshift.set("resources dc/tasks-green --requests=cpu=330m,memory=600Mi --limits=cpu=330m,memory=600Mi -n ${env.STAGE_PROJECT}")
                                      def dc = openshift.selector("dc", "tasks-green")
                                      while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                                          sleep 10
                                      }
                                      
                                  }
                                  if (newState == 'blue') {
                                      println("4-2")
                                      openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.STAGE_PROJECT}/tasks-blue:${version}")
                                      openshift.selector('dc', 'tasks-blue').delete()
                                      openshift.selector('svc', 'tasks-blue').delete()
                                      println("4-2-1")
                                      openshift.newApp("--name=tasks-blue --image-stream=${env.STAGE_PROJECT}/tasks-blue:${version}")
                                      openshift.set("probe dc/tasks-blue --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=90 --failure-threshold=20 --period-seconds=20 --timeout-seconds=5")
                                      openshift.set("probe dc/tasks-blue --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 --timeout-seconds=5")
                                      openshift.set("resources dc/tasks-blue --requests=cpu=330m,memory=600Mi --limits=cpu=330m,memory=600Mi -n ${env.STAGE_PROJECT}")
                                      def dc = openshift.selector("dc", "tasks-blue")
                                      while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                                          sleep 10
                                      }
                                  }
                                  println("5")
                                  
                                  if (currentState == 'green') {
                                      println("6-1")
                                      openshift.patch('route/tasks-green', "'{\"spec\":{\"to\":{\"name\":\"tasks-blue\"}}}'")
                                  }
                                  if (currentState == 'blue') {
                                      println("6-2")
                                      openshift.patch('route/tasks-green', "'{\"spec\":{\"to\":{\"name\":\"tasks-green\"}}}'")
                                  }
                                  
                                  println("7")
                              } 
                          }    
                      }
                    }    
                    
                    
                    
                    
                    
                  }
                }
              }
              
              stage('Deploy STAGE-ab') {
                steps {
                  script {
                    
                    
                    openshift.withCluster() {
                      openshift.withProject("${env.STAGE_PROJECT}-ab") {
                          echo "Using project: ${openshift.project()}"
                          if (!openshift.selector('dc', 'tasks-old').exists()) {
                              println("Begin")
                              openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.STAGE_PROJECT}-ab/tasks-old:${version}")
                              openshift.newApp("--name=tasks-old --image-stream=${env.STAGE_PROJECT}-ab/tasks-old:${version}").narrow("svc").expose()
                              openshift.set("probe dc/tasks-old --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=90 --failure-threshold=20 --period-seconds=20 --timeout-seconds=5")
                              openshift.set("probe dc/tasks-old --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 --timeout-seconds=5")
                              openshift.set("resources dc/tasks-old --requests=cpu=330m,memory=600Mi --limits=cpu=330m,memory=600Mi -n ${env.STAGE_PROJECT}-ab")
                              println("Old app done")
                              openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.STAGE_PROJECT}-ab/tasks-new:${version}")
                              openshift.newApp("--name=tasks-new --image-stream=${env.STAGE_PROJECT}-ab/tasks-new:${version}").narrow("svc").expose()
                              openshift.set("probe dc/tasks-new --readiness --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=90 --failure-threshold=20 --period-seconds=20 --timeout-seconds=5")
                              openshift.set("probe dc/tasks-new --liveness  --get-url=http://:8080/ws/demo/healthcheck --initial-delay-seconds=180 --failure-threshold=10 --period-seconds=10 --timeout-seconds=5")
                              openshift.set("resources dc/tasks-new --requests=cpu=330m,memory=600Mi --limits=cpu=330m,memory=600Mi -n ${env.STAGE_PROJECT}-ab")
                              println("New app done")
                              def dc = openshift.selector("dc", "tasks-new")
                              while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                                  sleep 10
                              }

                              sh "oc project ${env.STAGE_PROJECT}-ab"
                              sh "oc expose service tasks-old --name='ab' -l name='ab'"
                              sh "oc annotate route/ab haproxy.router.openshift.io/balance=roundrobin"
                              sh "oc set route-backends ab tasks-old=20 tasks-new=80"
                              println("All done")

                          } else {
                              
                              println("Both")

                              openshift.tag("${env.STAGE_PROJECT}-ab/tasks-new:${version}", "${env.STAGE_PROJECT}-ab/tasks-old:${version}")
                              //openshift.selector("dc", "tasks-old").rollout().latest()

                              openshift.tag("${env.DEV_PROJECT}/tasks:latest", "${env.STAGE_PROJECT}-ab/tasks-new:${version}")
                              //openshift.selector("dc", "tasks-new").rollout().latest()

                              def dc = openshift.selector("dc", "tasks-new")
                              while (dc.object().spec.replicas != dc.object().status.availableReplicas) {
                                  sleep 10
                              } 
                          }    
                      }
                    }    
                    
                    
                    
                    
                    
                  }
                }
              }
              
              
            }
          }
      type: JenkinsPipeline
- apiVersion: v1
  kind: ConfigMap
  metadata:
    labels:
      app: cicd-pipeline
      role: jenkins-slave
    name: jenkins-slaves
  data:
    maven-template: |-
      <org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
        <inheritFrom></inheritFrom>
        <name>maven</name>
        <privileged>false</privileged>
        <alwaysPullImage>false</alwaysPullImage>
        <instanceCap>2147483647</instanceCap>
        <idleMinutes>0</idleMinutes>
        <label>maven</label>
        <serviceAccount>jenkins</serviceAccount>
        <nodeSelector></nodeSelector>
        <customWorkspaceVolumeEnabled>false</customWorkspaceVolumeEnabled>
        <workspaceVolume class="org.csanchez.jenkins.plugins.kubernetes.volumes.workspace.EmptyDirWorkspaceVolume">
          <memory>false</memory>
        </workspaceVolume>
        <volumes />
        <containers>
          <org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
            <name>jnlp</name>
            <image>openshift/jenkins-slave-maven-centos7</image>
            <privileged>false</privileged>
            <alwaysPullImage>false</alwaysPullImage>
            <workingDir>/tmp</workingDir>
            <command></command>
            <args>${computer.jnlpmac} ${computer.name}</args>
            <ttyEnabled>false</ttyEnabled>
            <resourceRequestCpu>200m</resourceRequestCpu>
            <resourceRequestMemory>512Mi</resourceRequestMemory>
            <resourceLimitCpu>2</resourceLimitCpu>
            <resourceLimitMemory>4Gi</resourceLimitMemory>
            <envVars/>
          </org.csanchez.jenkins.plugins.kubernetes.ContainerTemplate>
        </containers>
        <envVars/>
        <annotations/>
        <imagePullSecrets/>
      </org.csanchez.jenkins.plugins.kubernetes.PodTemplate>
# Setup Demo
- apiVersion: batch/v1
  kind: Job
  metadata:
    name: cicd-demo-installer
  spec:
    activeDeadlineSeconds: 600
    completions: 1
    parallelism: 1
    template:
      spec:
        containers:
        - env:
          - name: CICD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          command:
          - /bin/bash
          - -x
          - -c
          - |
            oc set resources dc/jenkins --limits=cpu=2,memory=2Gi --requests=cpu=100m,memory=512Mi 
            oc label dc jenkins app=jenkins --overwrite 

            HOSTNAME=$(oc get route jenkins -o template --template='{{.spec.host}}' | sed "s/jenkins-${CICD_NAMESPACE}.//g")
            GOGS_HOSTNAME="gogs-$CICD_NAMESPACE.$HOSTNAME"

            if [ "${EPHEMERAL}" == "true" ] ; then
              oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-template.yaml \
                  --param=GOGS_VERSION=0.11.34 \
                  --param=HOSTNAME=$GOGS_HOSTNAME \
                  --param=SKIP_TLS_VERIFY=true
            else
              oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/gogs-openshift-docker/master/openshift/gogs-persistent-template.yaml \
                  --param=GOGS_VERSION=0.11.34 \
                  --param=HOSTNAME=$GOGS_HOSTNAME \
                  --param=SKIP_TLS_VERIFY=true
            fi
            
            sleep 5

            oc new-app -f http://bit.ly/openshift-sonarqube-embedded-template --param=SONARQUBE_VERSION=7.0 --param=SONAR_MAX_MEMORY=6Gi

            if [ "${WITH_CHE}" == "true" ] ; then
              oc process -f https://raw.githubusercontent.com/minishift/minishift/master/addons/che/templates/che-single-user.yml \
                --param PROJECT_NAME=$CICD_NAMESPACE \
                --param DOMAIN_NAME=$HOSTNAME \
                --param OPENSHIFT_OAUTH_TOKEN="$(cat /var/run/secrets/kubernetes.io/serviceaccount/token)" \
                | oc create -f -

              oc set resources dc/che --limits=cpu=1,memory=2Gi --requests=cpu=200m,memory=512Mi
            fi

            if [ "${EPHEMERAL}" == "true" ] ; then
              oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus3-template.yaml --param=NEXUS_VERSION=3.12.1 --param=MAX_MEMORY=2Gi
            else
              oc new-app -f https://raw.githubusercontent.com/OpenShiftDemos/nexus/master/nexus3-persistent-template.yaml --param=NEXUS_VERSION=3.12.1 --param=MAX_MEMORY=2Gi
            fi

            GOGS_SVC=$(oc get svc gogs -o template --template='{{.spec.clusterIP}}')
            GOGS_USER=gogs
            GOGS_PWD=gogs

            oc rollout status dc gogs

            _RETURN=$(curl -o /tmp/curl.log -sL --post302 -w "%{http_code}" http://$GOGS_SVC:3000/user/sign_up \
              --form user_name=$GOGS_USER \
              --form password=$GOGS_PWD \
              --form retype=$GOGS_PWD \
              --form email=admin@gogs.com)

            sleep 5

            if [ $_RETURN != "200" ] && [ $_RETURN != "302" ] ; then
              echo "ERROR: Failed to create Gogs admin"
              cat /tmp/curl.log
              exit 255
            fi

            sleep 10

            _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
            -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/migrate --data '{"clone_addr": "https://github.com/OpenShiftDemos/openshift-tasks.git","repo_name": "openshift-tasks","uid": 1}')

            if [ $_RETURN != "201" ] ;then
              echo "ERROR: Failed to imported openshift-tasks GitHub repo"
              cat /tmp/curl.log
              exit 255
            fi

            sleep 5

            cat <<EOF > /tmp/data.json
            {
              "type": "gogs",
              "config": {
                "url": "https://openshift.default.svc.cluster.local/oapi/v1/namespaces/$CICD_NAMESPACE/buildconfigs/tasks-pipeline/webhooks/${WEBHOOK_SECRET}/generic",
                "content_type": "json"
              },
              "events": [
                "push"
              ],
              "active": true
            }
            EOF

            _RETURN=$(curl -o /tmp/curl.log -sL -w "%{http_code}" -H "Content-Type: application/json" \
            -u $GOGS_USER:$GOGS_PWD -X POST http://$GOGS_SVC:3000/api/v1/repos/gogs/openshift-tasks/hooks -d @/tmp/data.json)

            if [ $_RETURN != "201" ] ; then
              echo "ERROR: Failed to set webhook"
              cat /tmp/curl.log
              exit 255
            fi
          image: openshift/origin:v3.10
          name: cicd-demo-installer-job
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        restartPolicy: Never
